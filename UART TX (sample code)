#include "stm32g070xx.h"  // Include the STM32G070RB header file

void GPIO_Init(void) {
    // Enable the clock for GPIOA
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN;

    // Configure PA2 as USART2_TX (Alternate Function)
    GPIOA->MODER &= ~(GPIO_MODER_MODE2);   // Clear mode for PA2
    GPIOA->MODER |= GPIO_MODER_MODE2_1;    // Set PA2 to Alternate Function mode
    GPIOA->AFR[0] |= (0x1 << GPIO_AFRL_AFSEL2_Pos);  // Set AF1 for PA2 (USART2_TX)

    // Configure PA3 as USART2_RX (Alternate Function)
    GPIOA->MODER &= ~(GPIO_MODER_MODE3);   // Clear mode for PA3
    GPIOA->MODER |= GPIO_MODER_MODE3_1;    // Set PA3 to Alternate Function mode
    GPIOA->AFR[0] |= (0x1 << GPIO_AFRL_AFSEL3_Pos);  // Set AF1 for PA3 (USART2_RX)
}

void USART2_Init(void) {
    // Enable the clock for USART2
    RCC->APBENR1 |= RCC_APBENR1_USART2EN;

    // Configure USART2 for 9600 baud, 8 data bits, no parity, 1 stop bit
    USART2->BRR = 1667;  // Assuming a 16 MHz system clock (16,000,000 / 9600)
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE;  // Enable transmitter and receiver
    USART2->CR1 |= USART_CR1_UE;  // Enable USART
}

void USART2_SendChar(int c) {
    while (!(USART2->ISR & (1<<6)));  // Wait until TXE (Transmit Data Register Empty) is set
    USART2->TDR = c;  // Write data to transmit
}

int main(void) {
    GPIO_Init();   // Initialize GPIOs for USART2
    USART2_Init(); // Initialize USART2

    while (1) {
        USART2_SendChar('A');  // Send character 'A'
       
		}
}
